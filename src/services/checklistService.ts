// src/services/checklistService.ts
import { supabase } from "@/utils/supabaseClient";

// üìå ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á checklist (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô DB)
export interface Checklist {
  id: string;
  title: string;
  description?: string | null;
  user_id: string;          // ‚úÖ ‡πÉ‡∏ä‡πâ user_id ‡∏ï‡∏≤‡∏° RLS
  created_at: string;       // timestamp in DB
  updated_at?: string | null;
  // ... ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô status, year, template_id ‡∏Ø‡∏•‡∏Ø
}

// ‡∏î‡∏∂‡∏á user id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
export async function getAuthUid() {
  const { data, error } = await supabase.auth.getUser();
  if (error || !data?.user?.id) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (auth.uid) ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
  }
  return data.user.id;
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ checklist ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏≤‡∏° RLS: user_id = auth.uid())
export async function getChecklists(): Promise<Checklist[]> {
  const uid = await getAuthUid();

  const { data, error } = await supabase
    .from("checklists")
    .select("*")
    .eq("user_id", uid)
    .order("created_at", { ascending: false });

  if (error) {
    console.error("‡πÇ‡∏´‡∏•‡∏î checklists ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    throw error;
  }
  return (data as Checklist[]) || [];
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á checklist ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á user_id ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô WITH CHECK)
export async function createChecklist(payload: {
  title: string;
  description?: string;
  // ... field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
}): Promise<Checklist> {
  const uid = await getAuthUid();

  const insertData = { ...payload, user_id: uid };

  const { data, error } = await supabase
    .from("checklists")
    .insert([insertData])
    .select("*")
    .single();

  if (error) {
    console.error("‡∏™‡∏£‡πâ‡∏≤‡∏á checklist ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    throw error;
  }
  return data as Checklist;
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç checklist ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (RLS ‡∏Ñ‡∏∏‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
export async function updateChecklist(
  id: string,
  patch: Partial<Omit<Checklist, "id" | "user_id" | "created_at">>
): Promise<Checklist> {
  // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à uid ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ RLS ‡∏à‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ú‡πà‡∏≤‡∏ô user_id = auth.uid()
  const { data, error } = await supabase
    .from("checklists")
    .update({ ...patch, updated_at: new Date().toISOString() })
    .eq("id", id)
    .select("*")
    .single();

  if (error) {
    console.error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï checklist ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    throw error;
  }
  return data as Checklist;
}

// ‡∏•‡∏ö checklist ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ DELETE ‡∏à‡∏∞‡∏≠‡∏¥‡∏á RLS ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô)
export async function deleteChecklist(id: string): Promise<void> {
  const { error } = await supabase
    .from("checklists")
    .delete()
    .eq("id", id);

  if (error) {
    console.error("‡∏•‡∏ö checklist ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    throw error;
  }
}
