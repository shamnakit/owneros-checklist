// src/components/ScoreRadarChart.tsx
import {
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  ResponsiveContainer,
  Tooltip,
  Legend,
} from "recharts";
import { useMemo } from "react";

/** ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: ‡πÉ‡∏ä‡πâ "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÄ‡∏Å‡∏£‡∏î" ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (0‚Äì100) */
export interface CategoryScore {
  category: string;     // ‡πÄ‡∏ä‡πà‡∏ô "Strategy", "Org Structure", ...
  scorePct: number;     // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡πÄ‡∏Å‡∏£‡∏î ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô % ‡πÅ‡∏•‡πâ‡∏ß (0..100)
  progressPct?: number; // (‡πÄ‡∏™‡∏£‡∏¥‡∏°) %‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÉ‡∏ô Tooltip ‡πÑ‡∏î‡πâ
}

type Props = {
  current: CategoryScore[];      // ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  previous?: CategoryScore[];    // ‡∏õ‡∏µ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á ‡∏à‡∏∞‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  labelCurrent?: string;         // ‡πÄ‡∏ä‡πà‡∏ô "‡∏õ‡∏µ 2025"
  labelPrevious?: string;        // ‡πÄ‡∏ä‡πà‡∏ô "‡∏õ‡∏µ 2024"
  targetLinePct?: number;        // ‡πÄ‡∏ä‡πà‡∏ô 70 (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢)
};

/** ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏•‡∏±‡∏ö */
const DEFAULT_ORDER = [
  "Strategy",
  "Org Structure",
  "SOP",
  "HR",
  "Finance",
  "Sales",
];

function fmtPct(n: number) {
  return (
    n.toLocaleString("th-TH", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }) + "%"
  );
}

type Merged = {
  category: string;
  current?: number;
  previous?: number;
  progressCurrent?: number;
  progressPrevious?: number;
};

/** ‡∏£‡∏ß‡∏° category ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô + ‡πÅ‡∏°‡πá‡∏û‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô data ‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RadarChart */
function buildChartData(
  current: CategoryScore[],
  previous?: CategoryScore[]
): Merged[] {
  const map = new Map<string, Merged>();

  for (const c of current) {
    map.set(c.category, {
      ...(map.get(c.category) || { category: c.category }),
      current: clamp01to100(c.scorePct),
      progressCurrent: c.progressPct,
    });
  }
  if (previous) {
    for (const p of previous) {
      map.set(p.category, {
        ...(map.get(p.category) || { category: p.category }),
        previous: clamp01to100(p.scorePct),
        progressPrevious: p.progressPct,
      });
    }
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° DEFAULT_ORDER ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const orderedKeys = [
    ...DEFAULT_ORDER,
    ...Array.from(map.keys()).filter((k) => !DEFAULT_ORDER.includes(k)),
  ];

  return orderedKeys
    .filter((k) => map.has(k))
    .map((k) => map.get(k)!) as Merged[];
}

function clamp01to100(n: number | undefined) {
  if (n == null || isNaN(n)) return 0;
  if (n < 0) return 0;
  if (n > 100) return 100;
  return n;
}

export default function ScoreRadarChart({
  current,
  previous,
  labelCurrent = "‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  labelPrevious = "‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô",
  targetLinePct, // ‡πÄ‡∏ä‡πà‡∏ô 70 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå baseline
}: Props) {
  const data = useMemo(() => buildChartData(current, previous), [current, previous]);

  return (
    <div className="w-full h-96">
      <ResponsiveContainer width="100%" height="100%">
        <RadarChart cx="50%" cy="50%" outerRadius="80%" data={data}>
          <PolarGrid />
          <PolarAngleAxis
            dataKey="category"
            // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡∏¢‡∏≤‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà tickFormatter ‡∏°‡∏≤‡∏¢‡πà‡∏≠‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
          />
          {/* üîí ‡∏•‡πá‡∏≠‡∏Å‡∏™‡πÄ‡∏Å‡∏•‡πÄ‡∏õ‡πá‡∏ô 0‚Äì100 ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Auto-scale) */}
          <PolarRadiusAxis
            angle={30}
            domain={[0, 100]}
            tickFormatter={(v) => `${v}`}
          />

          {/* ‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡πÄ‡∏Å‡∏£‡∏î) */}
          <Radar
            name={labelCurrent}
            dataKey="current"
            stroke="#2563eb"      // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
            fill="#2563eb"
            fillOpacity={0.35}
          />

          {/* ‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå‡∏õ‡∏µ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
          {previous && (
            <Radar
              name={labelPrevious}
              dataKey="previous"
              stroke="#10b981"    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
              fill="#10b981"
              fillOpacity={0.25}
            />
          )}

          {/* (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô 70% */}
          {typeof targetLinePct === "number" && targetLinePct >= 0 && targetLinePct <= 100 && (
            // ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ: ‡πÉ‡∏ä‡πâ Radar ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ß‡∏á‡πÄ‡∏™‡πâ‡∏ô" ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö target
            // ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏Å‡∏ô = targetLinePct (‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏£‡∏π‡∏õ)
            <Radar
              name={`Target ${targetLinePct}%`}
              dataKey={() => targetLinePct}
              stroke="#9ca3af"  // ‡πÄ‡∏ó‡∏≤
              fillOpacity={0}
              isAnimationActive={false}
            />
          )}

          <Tooltip
            // Tooltip ‡πÅ‡∏™‡∏î‡∏á Score% + ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á Œî (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ previous) ‡πÅ‡∏•‡∏∞‡πÇ‡∏ä‡∏ß‡πå Progress% (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            formatter={(value: any, name: string, props: any) => {
              const v = Number(value);
              const s = fmtPct(v);
              if (name === labelCurrent && props?.payload?.previous != null) {
                const prev = Number(props.payload.previous);
                const diff = v - prev;
                const sign = diff >= 0 ? "+" : "";
                return [`${s} (${sign}${diff.toFixed(2)}%)`, "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"];
              }
              return [s, "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"];
            }}
            labelFormatter={(label: any, payload: any) => {
              // ‡∏î‡∏∂‡∏á progressPct ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
              const p = Array.isArray(payload) && payload.length > 0 ? payload[0].payload : null;
              const progCur =
                typeof p?.progressCurrent === "number"
                  ? ` ‚Ä¢ Progress: ${fmtPct(p.progressCurrent)}`
                  : "";
              const progPrev =
                typeof p?.progressPrevious === "number"
                  ? ` | Prev: ${fmtPct(p.progressPrevious)}`
                  : "";
              return `‡∏´‡∏°‡∏ß‡∏î: ${label}${progCur}${progPrev}`;
            }}
          />
          <Legend />
        </RadarChart>
      </ResponsiveContainer>
    </div>
  );
}
