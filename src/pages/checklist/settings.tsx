// src/pages/checklist/settings.tsx
import { useState, useEffect } from "react";
import { useUserProfile } from "@/hooks/useUserProfile";
import { supabase } from "@/utils/supabaseClient";
import Image from "next/image";

function slugify(filename: string) {
  const i = filename.lastIndexOf(".");
  const base = (i >= 0 ? filename.slice(0, i) : filename)
    .toLowerCase()
    .replace(/[^a-z0-9‡∏Å-‡πô_\- ]+/gi, "")
    .trim()
    .replace(/\s+/g, "-");
  const ext = i >= 0 ? filename.slice(i).toLowerCase() : "";
  return `${base}${ext}`;
}

export default function SettingsPage() {
  const { profile, loading, refresh } = useUserProfile();

  const [companyName, setCompanyName] = useState("");
  const [companyLogoUrl, setCompanyLogoUrl] = useState("");
  const [updating, setUpdating] = useState(false);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    if (profile) {
      setCompanyName(profile.company_name || "");
      setCompanyLogoUrl(profile.company_logo_url || "");
    }
  }, [profile]);

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô upsert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ row ‡πÉ‡∏ô profiles (‡∏à‡∏∞‡πÑ‡∏°‡πà 400)
  const handleSave = async () => {
    setUpdating(true);
    try {
      const { data: authData, error: authErr } = await supabase.auth.getUser();
      if (authErr || !authData?.user?.id) {
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤ user.id ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠");
        return;
      }

      const payload = {
        id: authData.user.id,                 // PK ‡∏Ç‡∏≠‡∏á profiles
        company_name: companyName || null,
        company_logo_url: companyLogoUrl || null,
        updated_at: new Date().toISOString(), // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ
      };

      const { data, error } = await supabase
        .from("profiles")
        .upsert(payload, { onConflict: "id" })
        .select()
        .single();

      if (error) {
        console.error("Upsert profile ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
        return;
      }

      await refresh();
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setUpdating(false);
    }
  };

  const handleLogoUpload = async (file: File) => {
    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï profiles.company_logo_url + company_logo_key
    setUploading(true);
    try {
      const { data: authData, error: authErr } = await supabase.auth.getUser();
      if (authErr || !authData?.user?.id) {
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤ user.id ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠");
        return;
      }
      const uid = authData.user.id;

      if (!file.type.startsWith("image/")) {
        alert("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
        return;
      }
      const maxSizeMB = 5;
      if (file.size > maxSizeMB * 1024 * 1024) {
        alert(`‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏à‡∏≥‡∏Å‡∏±‡∏î ${maxSizeMB}MB)`);
        return;
      }

      const key = `${uid}/logo/${Date.now()}-${slugify(file.name)}`;

      const { error: upErr } = await supabase.storage
        .from("public-assets")
        .upload(key, file, { upsert: true, contentType: file.type });
      if (upErr) {
        alert("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + upErr.message);
        return;
      }

      const { data: pub } = supabase.storage
        .from("public-assets")
        .getPublicUrl(key);
      const url = pub?.publicUrl || "";

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ upsert ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ row)
      const { error: updErr } = await supabase
        .from("profiles")
        .upsert(
          {
            id: uid,
            company_logo_url: url,
            company_logo_key: key,
            updated_at: new Date().toISOString(),
          },
          { onConflict: "id" }
        );
      if (updErr) {
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + updErr.message);
        return;
      }

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (profile?.company_logo_key) {
        const { error: sErr } = await supabase.storage
          .from("public-assets")
          .remove([profile.company_logo_key]);
        if (sErr) console.warn("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", sErr);
      }

      setCompanyLogoUrl(url);
      await refresh();
      alert("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setUploading(false);
    }
  };

  const handleLogoDelete = async () => {
    const { data: authData, error: authErr } = await supabase.auth.getUser();
    if (authErr || !authData?.user?.id) {
      alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤ user.id ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠");
      return;
    }
    const uid = authData.user.id;

    setUploading(true);
    try {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ upsert ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ row)
      const { error: updErr } = await supabase
        .from("profiles")
        .upsert(
          { id: uid, company_logo_url: null, company_logo_key: null, updated_at: new Date().toISOString() },
          { onConflict: "id" }
        );
      if (updErr) {
        alert("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + updErr.message);
        return;
      }

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô bucket ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ key
      if (profile?.company_logo_key) {
        const { error: sErr } = await supabase.storage
          .from("public-assets")
          .remove([profile.company_logo_key]);
        if (sErr) console.warn("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", sErr);
      }

      setCompanyLogoUrl("");
      await refresh();
      alert("‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setUploading(false);
    }
  };

  if (loading) {
    return <div className="p-10 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ profile (‡πÄ‡∏ä‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á UI ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ upsert ‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  return (
    <div className="max-w-2xl mx-auto py-10">
      <h1 className="text-2xl font-bold text-slate-800 mb-6">‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h1>

      <div className="space-y-6">
        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó */}
        <div>
          <label className="block font-semibold text-sm mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</label>
          <input
            type="text"
            className="w-full border px-4 py-2 rounded"
            value={companyName}
            onChange={(e) => setCompanyName(e.target.value)}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£ ‡∏à‡∏≥‡∏Å‡∏±‡∏î"
          />
        </div>

        {/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î & URL ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) */}
        <div className="space-y-3">
          <label className="block font-semibold text-sm">‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</label>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
          <div className="flex items-center gap-3">
            <label className="inline-flex items-center gap-2 px-4 py-2 rounded bg-slate-100 hover:bg-slate-200 cursor-pointer">
              {uploading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..." : "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ"}
              <input
                type="file"
                accept="image/*"
                className="hidden"
                onChange={(e) => {
                  const f = e.target.files?.[0];
                  if (f) handleLogoUpload(f);
                  e.currentTarget.value = "";
                }}
                disabled={uploading}
              />
            </label>

            {companyLogoUrl && (
              <button
                onClick={handleLogoDelete}
                disabled={uploading}
                className="px-3 py-2 rounded bg-red-50 text-red-600 hover:bg-red-100"
                title="‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ"
              >
                üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ
              </button>
            )}
          </div>

          {/* ‡∏õ‡πâ‡∏≠‡∏ô URL ‡πÄ‡∏≠‡∏á (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) */}
          <div>
            <label className="block font-semibold text-xs text-gray-600 mb-1">
              ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà URL
            </label>
            <input
              type="url"
              className="w-full border px-4 py-2 rounded"
              value={companyLogoUrl}
              onChange={(e) => setCompanyLogoUrl(e.target.value)}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô https://.../logo.png"
            />
          </div>

          {/* ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß */}
          {companyLogoUrl && (
            <div className="pt-2">
              <Image
                src={companyLogoUrl}
                alt="Company Logo"
                width={140}
                height={140}
                className="rounded border"
              />
            </div>
          )}
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
        <div>
          <button
            onClick={handleSave}
            disabled={updating}
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
          >
            {updating ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"}
          </button>
        </div>
      </div>
    </div>
  );
}
