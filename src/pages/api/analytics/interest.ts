// src/pages/api/analytics/interest.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { phInsights } from "@/lib/analytics/posthog.server";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // allow only GET
  if (req.method !== "GET") {
    res.setHeader("Allow", "GET");
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const date_from = (req.query.date_from as string) || "-30d";
    const interval = (req.query.interval as string) || "day";
    const display = (req.query.display as string) || "ActionsTable";

    // ‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ?events=a,b ‡∏´‡∏£‡∏∑‡∏≠ ?events=a&events=b
    const rawEvents = Array.isArray(req.query.events)
      ? req.query.events.join(",")
      : (req.query.events as string) || "";

    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö breakdown ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
    const breakdown = (req.query.breakdown as string) || "plan"; // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö prop ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏à‡∏≤‡∏Å client
    const breakdown_type =
      (req.query.breakdown_type as "event" | "person" | "cohort" | "session") || "event";

    // alias ‚Üí real event mapping (‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö funnel.ts)
    const ALIAS_MAP: Record<string, string> = {
      visit: "Dashboard Viewed",
      signup: "signup",
      activated: "Score Recomputed",
      export_attempt: "Export Binder",
      pricing_interest: "Pricing CTA Clicked",
    };

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á events ‡∏°‡∏≤‡πÄ‡∏•‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ default = pricing_interest
    const sourceEvents = (rawEvents
      .split(",")
      .map((s) => s.trim())
      .filter(Boolean)).length
      ? rawEvents.split(",").map((s) => s.trim()).filter(Boolean)
      : ["pricing_interest"];

    // map alias ‚Üí real name (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà alias ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ event ‡∏à‡∏£‡∏¥‡∏á)
    const series = sourceEvents.map((keyOrName) => {
      const real = ALIAS_MAP[keyOrName] || keyOrName;
      return { event: real, name: real, type: "events", math: "total" as const };
    });

    const body: any = {
      insight: "TRENDS",
      date_from,
      interval,
      display,   // "ActionsTable" by default
      series,
    };

    // ‡πÅ‡∏ô‡∏ö breakdown ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î key ‡∏°‡∏≤
    if (breakdown) {
      body.breakdown = breakdown;
      body.breakdown_type = breakdown_type;
    }

    const data = await phInsights(body);

    // caching ‡πÄ‡∏ö‡∏≤ ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
    res.setHeader("Cache-Control", "s-maxage=60, stale-while-revalidate=120");
    return res.status(200).json(data);
  } catch (e: any) {
    return res.status(500).json({ error: e?.message || "PostHog interest error" });
  }
}
